return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
#example matrices
#mat <- matrix(rnorm(25,1),5,5)
matVector <- makeCacheMatrix(mat)
cacheSolve(mat)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (! is.null(inv) ){
message("Getting cached inverse.")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInverse(inv)
inv
}
#example matrices
#mat <- matrix(rnorm(25,1),5,5)
matVector <- makeCacheMatrix(mat)
cacheSolve(mat)
cacheSolve(matVector)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
changed <<- TRUE
}
get <- function() x
setinverse <- function(inverse){
inv <<- inverse
changed <<- false
}
getinverse <- function() inv
hasChanged <- function() changed
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse,
hasChanged = hasChanged)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if (! is.null(inv) && ! x$hasChanged() ){
message("Getting cached inverse.")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
#example matrices
#mat <- matrix(rnorm(25,1),5,5)
cacheSolve(mat)
matVector <- makeCacheMatrix(mat)
cacheSolve(matVector)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
changed <<- TRUE
}
get <- function() x
setinverse <- function(inverse){
inv <<- inverse
changed <<- FALSE
}
getinverse <- function() inv
hasChanged <- function() changed
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse,
hasChanged = hasChanged)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if (! is.null(inv) && ! x$hasChanged() ){
message("Getting cached inverse.")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
#example matrices
#mat <- matrix(rnorm(25,1),5,5)
matVector <- makeCacheMatrix(mat)
cacheSolve(matVector)
cacheSolve(matVector)
matVector$set(matrix(1:16,4,4))
cacheSolve(matVector)
matVector$set(matrix(runif(16,1)))
cacheSolve(matVector)
matVector$set(matrix(runif(16,1),4,4))
cacheSolve(matVector)
matVector$set(matrix(runif(16,1),4,4))
matVector$get
matVector$get()
matVector$set(matrix(rnorm(16,1),4,4))
cacheSolve(matVector)
cacheSolve(matVector)
install_from_swirl("R Programming")
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
z + 555 + z
c(z, 555, z)
z
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)
c(1:4)
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 100
z * 2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(1,20, by=0.5)
seq(1,10, by=0.5)
seq(0,10, by=0.5)
seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
c('my', 'name', 'is')
my_char <- c('my', 'name', 'is')
my_char <- c('My', 'name', 'is')
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Patrick")
my_name
paste(my_name, collapse='')
paste(my_name, collapse=' ')
paste("Hello", "world!", sep = " ")
paste(1:3, c('X', 'Y', 'Z'), sep='')
LETTERS
paste(LETTERS, 1:4, sep='-')
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
<- rep(NA, 1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vector)
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf") #Name an (unnamed) vector
identical(vec, vec2)
identical(vect, vect2)
vect['bar']
vect$bar
vect$'bar'
vect[c("foo", "bar")]
ls()
ls(x)
str(x)
dnorm(x, mean = 0, sd = 1, log = FALSE)
x
pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
pnorm(.3, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
x <- rnorm(10, 20, 2)
x
rpois(10,1)
ppois(6,4)
dpois(6,4)
qpois(6,4)
dpois(6,4)
?dpois
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
plot(x,y)
summary(y)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
x <- rnorm(10000)
e <- rnorm(10000, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
set.seed(10)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
x
x <- rnorm(100)
log.mu <- 0.5 + 0.3x
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
plolt(x, y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x, y)
set.seed(1)
sample(1:10, 4)
sample(1:10, 4)
sample(letters, 5)
sample(1:10)  ## permutation
sample(1:10)
sample(1:10, replace = TRUE)  ## Sample w/replacement
system.time()
system.time(readLines("http://www.jhsph.edu"))
source('~/Development/R programming/Week 4/profiler.R')
hilbert <- function(n) {
i <- 1:n
1 / outer(i - 1, i, "+”)
}
x <- hilbert(1000)
x <- hilbert(1000)
hilbert <- function(n) {
i <- 1:n
1 / outer(i - 1, i, "+”)
}
hilbert <- function(n) {
i <- 1:n
1 / outer(i - 1, i, "+”)
}
hilbert <- function(n) {
i <- 1:n
1 / outer(i - 1, i, '+')
}
hilbert <- function(n) {
i <- 1:n
1 / outer(i - 1, i, '+')
}
hilbert <- function(n) {
hilbert <- function(n) {
hilbert <- function(n) {
hilbert <- function(n) {
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
x <- hilbert(1000)
hilbert <- function(n) {
i <- 1:n
1 / outer(i - 1, i, '+')
}
c
clear
clear()
)
)
)
)
)
)
exit()
.
das
d
source('~/Development/R programming/Week 4/profiler.R')
source('~/Development/R programming/Week 4/profiler.R')
hilbert <- function(n) {
i <- 1:n
1 / outer(i - 1, i, '+')
}
library(XML)
library("XML")
install.packages("XML")
source('~/Development/Getting and cleaning data/quizz1.R')
library("XML")
data3 <- xmlTreeParse(fileUrl, useInternalNodes = TRUE)
fileUrl="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
data3 <- xmlTreeParse(fileUrl, useInternalNodes = TRUE)
fileUrl="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
data3 <- xmlTreeParse(fileUrl, useInternalNodes = TRUE)
data3 <- xmlTreeParse(fileUrl, file = "temp4")
data3 <- xmlTreeParse(fileUrl)
data3 <- xmlTreeParse("temp4")
data3 <- xmlTreeParse("temp3")
data3
rootNode <- xmlRoot(data3)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1][1]]
rootNode[[1]][[1]]
rootNode[[1]][[1]][[1]]
rootNode[[1]][[1]][[2]]
xpathSApply(rootNode, "//zipcode")
xpathSApply(rootNode, "//zipcode", xmlValue)
?xpathSApply
xpathSApply(rootNode, "//zipcode")
xpathSApply(rootNode, "//zipcode", xmlValue)
zips <-xpathSApply(rootNode, "//zipcode", xmlValue)
zi
zips
zips <-xpathSApply(rootNode, "//zipcode", xmlValue)
xmlSApply(rootNode, xmlValue)
zips <-xpathSApply(rootNode, "//zipcode", xmlValue)
zips <-xpathApply(rootNode, "//zipcode")
zips
zips <-xpathApply(rootNode, "//zipcode", xmlValue)
zips <-xpathSApply(rootNode, "//zipcode")
zips
head(zips)
rootNode[['zipcodes']]
out <- getNodeSet(rootNode, "//zipcode", fun=xmlToList)
tt <- xmlParse("temp4")
tt <- xmlParse("temp3")
out <- getNodeSet(tt, "//*[name()='out:issue']", fun=xmlToList)
out
out <- getNodeSet(tt, "//zipcode", fun=xmlToList)
out
out == 21231
count(out == 21231)
summary(out == 21231)
tt <- xmlParse("temp3")
summary(out == 21231)
url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url=url, destfile = "temp5", method="curl")
fread("temp5")
?fread
??fread
install.packages("data.table")
?fread
package("data.table")
library("data.table")
library("data.table")
?fread
DT <- fread("temp5")
summary(DT)
?data.table
DT
head(DT)
?tapply
sapply(split(DT$pwgtp15,DT$SEX),mean)
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile = "temp2", method="curl")
data2 <- read.csv("temp2")
dat<-data2[18-23,7-15]
sum(dat$Zip*dat$Ext,na.rm=T)
data2 <- read.table("temp2")
library("xlsx")
package.install("xlsx")
install.packages("xlsx")
package.install("xlsx")
library("xlsx")
install.packages("rJava")
install.packages("rJava")
package.install("xlsx")
install.packages("xlsx")
data2 <- read.xlsx("temp2",sheetIndex)
library("xlsx")
install.packages("xlsx")
library("xlsx")
install.packages("rJava")
library("xlsx")
library("rJava")
find.package("Java")
find.package("rJava")
library("rJava")
Sys.getenv("JAVA_HOME")
library("rJava")
library("xlsx")
install.packages("KernSmooth")
?kernapply
?KernSmooth
??KernSmooth
library("KernSmooth")
?ls
clear
clear()
install.packages("MySQL")
install.packages("mysql")
install.packages("rmysql")
install.packages("RMySQL")
library("RMySQL")
library("RMySQL")
install.packages("RMySQL")
setwd("~/Dropbox/Cursos MOOC/Exploratory Data Analysis/Week 3/Project/")
NEI <- readRDS("exdata-data-NEI_data/summarySCC_PM25.rds")
SCC <- readRDS("exdata-data-NEI_data/Source_Classification_Code.rds")
baltimoreData <- NEI[NEI$fips == "24510",]
# Cast, just in case
baltimoreData$Emissions <- as.numeric(as.character(baltimoreData$Emissions))
# Organize data by year-total emissions
baltimoreDataSummarized <- data.frame(baltimoreData$year, baltimoreData$Emissions)
names(baltimoreDataSummarized) <- c("year", "Emissions")
orgBaltimore <- tapply(baltimoreDataSummarized$Emissions, baltimoreDataSummarized$year, sum)
plot(names(orgBaltimore), type = "line", orgBaltimore, xlab = "Year", ylab = expression("Total " * PM[2.5] * " emissions (tons), "),col="blue",xaxt = "n"   )
axis(side=1,at=c(1999, 2002, 2005,2008))
baltimoreData <- NEI[NEI$fips == "24510",]
# Cast, just in case
baltimoreData$Emissions <- as.numeric(as.character(baltimoreData$Emissions))
# Organize data by year-total emissions
baltimoreDataSummarized <- data.frame(baltimoreData$year, baltimoreData$Emissions)
names(baltimoreDataSummarized) <- c("year", "Emissions")
orgBaltimore <- tapply(baltimoreDataSummarized$Emissions, baltimoreDataSummarized$year, sum)
# Creates device for png file
png(filename = "question2.png", width = 480, height = 480)
# Plot it
plot(names(orgBaltimore), type = "line", orgBaltimore, xlab = "Year", ylab = expression("Total " * PM[2.5] * " emissions (tons), "),col="blue",xaxt = "n"   )
axis(side=1,at=c(1999, 2002, 2005,2008))
title("2. Emissions in Baltimore")
#Explicitly turns off the device
dev.off()
